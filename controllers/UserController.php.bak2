<?php
/**
 * Created by PhpStorm.
 * User: SRT
 * Date: 09.04.2020
 * Time: 16:11
 */

namespace app\controllers;
use app\modules\api\models\Cameras;
use app\modules\api\models\Records;
use yii\web\ForbiddenHttpException;
use app\models\User;
use app\models\Devices;
use app\modules\api\models\MediaServer;
use app\models\Changepswd;
use app\models\Notifications;
use yii\web\Controller;
use Firebase\JWT\JWT;

class UserController extends CommonController
{
    public $layout  = 'userlayout';
//    public function behaviors(){
//        return [
//            'access' => [
//                'class' => \yii\filters\AccessControl::class,
//                'rules' => [
//                    [
//                        'allow' => true,
//                        'roles' => ['@'],
//                    ],
//                ],
//            ],
//        ];
//    }
//==============================================================USER---PROFILE=======================================
    public function actionUserprofile()
    {
        if(!($this->actionIsAdmin()) && $this->logincheck())
        {
            $user = $this->getUser();
            if(isset($_GET['options']))
            {
                if($_GET['options'] == 'notifications')
                {
                    $activepage = 'notifications';
                    $notifications = new Notifications();

                    if(isset($_POST['Notifications']))
                    {
                        $user->subscribe = $_POST['Notifications']['subscribe'];
                        $user->ysubscribe = $_POST['Notifications']['ysubscribe'];
                        $user->save();
                        $this->redirect(DOMAIN.'/en/user/userprofile?options=notifications');
                    }
                    if($user['subscribe']){
                        $checked = true;
                    }else{
                        $checked = false;
                    }
                    if($user['ysubscribe']){
                        $ychecked = true;
                    }else{
                        $ychecked = false;
                    }

                    return $this->render('userprofile',[
                        'username'=>mb_strtoupper($user['name']. ' ' .$user['surname']),
                        'emailadress'=>$user['email'],
                        'notifications'=>$notifications,
                        'checked' => $checked,
                        'ychecked' => $ychecked,
                        'activepage'=>$activepage,
                    ]);
                }elseif($_GET['options'] == 'pswd'){
                    $activepage = 'pswd';
                    $changepswd = new Changepswd();
                    if(isset($_POST['Changepswd']))
                    {
                        if($user['password']==passencode(clean_data($_POST['Changepswd']['oldpassword'])))
                        {
                            if(clean_data($_POST['Changepswd']['newpassword'] == clean_data($_POST['Changepswd']['confirmpassword'])))
                            {
                                $user->password = passencode(clean_data($_POST['Changepswd']['newpassword']));
                                $user->save();
                                return $this->render('userprofile',[
                                    'activepage'=>$activepage,
                                    'username'=>mb_strtoupper($user['name']. ' ' .$user['surname']),
                                    'emailadress'=>$user['email'],
                                    'changepswd'=>$changepswd,
                                    'note'=>'success'
                                ]);
                            }else{
                                return $this->render('userprofile',[
                                    'activepage'=>$activepage,
                                    'username'=>mb_strtoupper($user['name']. ' ' .$user['surname']),
                                    'emailadress'=>$user['email'],
                                    'changepswd'=>$changepswd,
                                    'note'=>'notequals'
                                ]);
                            }
                        }else{
                            return $this->render('userprofile',[
                                'activepage'=>$activepage,
                                'username'=>mb_strtoupper($user['name']. ' ' .$user['surname']),
                                'emailadress'=>$user['email'],
                                'changepswd'=>$changepswd,
                                'note'=>'wrongpswd'
                            ]);
                        }

                    }
                    return $this->render('userprofile',[
                        'activepage'=>$activepage,
                        'username'=>mb_strtoupper($user['name']. ' ' .$user['surname']),
                        'emailadress'=>$user['email'],
                        'changepswd'=>$changepswd,
                        'note'=>''
                    ]);
                }else{
                    $activepage = '';
                    return $this->render('userprofile',[
                        'activepage'=>$activepage,
                        'username'=>mb_strtoupper($user['name']. ' ' .$user['surname']),
                        'emailadress'=>$user['email']
                    ]);
                }

            }


        }else{
            throw new ForbiddenHttpException(\Yii::t('yii', 'You are not allowed to perform this action.'));
        }
    }

    public function actionMycameras()
    {
        return $this->render('mycameras');
    }

//============================================================EVENTS---PAGE=====================================
    public function actionEvents()
    {

        if(!($this->actionIsAdmin()) && $this->logincheck()) {
        //из jwt берем юзер ид, по нему находим устройства для этого пользователя, по устройствам находим камеры по камерам находим видеозаписи.
            $user_info = $this->getUser();
            $dev_bd = Devices::find()->where(['user_id'=>$user_info->id])->all();

            $user_cameras_db = array();
            for($i=0; $i<=count($dev_bd)-1;$i++)
            {
                array_push($user_cameras_db,Cameras::find()->select('id')->where(['device_id'=>$dev_bd[$i]['id']])->all());
            }
//                $user_cameras[] = array();
		foreach ($user_cameras_db as $array) {
                    foreach ($array as $key => $val) {
                        $user_cameras[] = $val;
                    }
                }
            $rec_list_db=array();
//    	    if(!isset($user_cameras)){return $this->render('events',['records' => null, "allrecords" => null,"filtdate"=>null,'titles'=>null]);}
	    if(!isset($user_cameras)){return $this->render('mycameras');};
	    for($i=0; $i<=count($user_cameras)-1;$i++)
            {
                array_push($rec_list_db,Records::find()->where(['camera_id'=>$user_cameras[$i]['id']])->all());
            }
	    
           $rec_list = call_user_func_array('array_merge',$rec_list_db);
//            debug($rec_list);
            $records = new Records();
//            $rec_list = Records::find()->all();
            $cur_rec = [];
            for ($i = 0; $i <= count($rec_list) - 1; $i++) {
                $titles[$i] = [
                    "id" => $rec_list[$i]['id'],
                    "title" => $rec_list[$i]['title'],
                    "name" => $rec_list[$i]['file_name'],
                    "date" => stristr($rec_list[$i]['datetime'], ' ', true),
                    "time" => stristr($rec_list[$i]['datetime'], ' ')
                ];
            }
	    
            foreach ($titles as $key => $arr) {
                $dateArray[$key] = $arr['date'];
            }
            array_multisort($dateArray, SORT_STRING, $titles);
            $titles = array_reverse($titles);
            $j = 0;
            for ($i = 0; $i <= count($titles) - 2; $i++) {
                if ($titles[$i]['date'] == $titles[$i + 1]['date']) {
                    $allrecords[$j]['date'] = $titles[$i]['date'];
                    $allrecords[$j]['name' . $i] = $titles[$i]['name'];
                    $allrecords[$j]['title' . $i] = $titles[$i]['title'];
                    $allrecords[$j]['time' . $i] = $titles[$i]['time'];
//                    $allrecords[$j]['id' . $i] = $titles[$i]['id'];
                    $allrecords[$j]['name' . ($i + 1)] = $titles[$i + 1]['name'];
                    $allrecords[$j]['title' . ($i + 1)] = $titles[$i + 1]['title'];
                    $allrecords[$j]['time' . ($i + 1)] = $titles[$i + 1]['time'];
//                    $allrecords[$j]['id' . ($i + 1)] = $titles[$i + 1]['id'];

                } elseif (($i + 1 == count($titles) - 1)) {
                    $j++;
                    $allrecords[$j]['date'] = $titles[(count($titles) - 1)]['date'];
                    $allrecords[$j]['name' . (count($titles) - 1)] = $titles[(count($titles) - 1)]['name'];
                    $allrecords[$j]['title' . (count($titles) - 1)] = $titles[(count($titles) - 1)]['title'];
                    $allrecords[$j]['time' . (count($titles) - 1)] = $titles[(count($titles) - 1)]['time'];
//                    $allrecords[$j]['id' . (count($titles) - 1)] = $titles[(count($titles) - 1)]['id'];
                } else {
                    $allrecords[$j]['date'] = $titles[$i]['date'];
                    $allrecords[$j]['name' . $i] = $titles[$i]['name'];
                    $allrecords[$j]['title' . $i] = $titles[$i]['title'];
                    $allrecords[$j]['time' . $i] = $titles[$i]['time'];
//                    $allrecords[$j]['id' . $i] = $titles[$i]['id'];
                    $j++;
                }
            }
            if (isset($_POST['check_issue_date'])) {
//                $controldate = strtotime($_POST['check_issue_date']);
//                debug($controldate);
                $filterdate = strtotime($_POST['check_issue_date']);
            }else{
                $filterdate = null;
            }
            return $this->render('events', ['records' => $records, "allrecords" => $allrecords,"filtdate"=>$filterdate,'titles'=>$titles]);
        }else{
            throw new ForbiddenHttpException(\Yii::t('yii', 'You are not allowed to perform this action.'));
        }
    }

    public function actionWatchcamera()
    {
        if(!($this->actionIsAdmin()) && $this->logincheck()) {
            $jwt = new JWT;
            require JWTCONF;
            $user_info=$this->getUser();


            $id = $jwt->decode(\Yii::$app->getRequest()->get('id'),$key,array('HS256'));
            $recdata = Records::find()->where(['id'=>$id->data->id])->one();
//            $recdata->id;
            $camera_id = Records::find()->select(['camera_id'])->where(['id'=>$recdata->id])->one();
//            $camera_id->cameta_id
            $device_id = Cameras::find()->select(['device_id'])->where(['id'=>$camera_id->camera_id])->one();

	    $mserver_id = Devices::find()->select(['mserver_id'])->where(['id'=>$device_id])->one();

            $Mserv_info = MediaServer::find()->where(['id'=>$mserver_id])->one();
            return $this->render('watchcamera',['recdata'=>$recdata,'camera_id'=>$camera_id->camera_id,'user_id'=>$user_info->id,'Mserv_info'=>$Mserv_info]);
        }else {
            throw new ForbiddenHttpException(\Yii::t('yii', 'You are not allowed to perform this action.'));
        }
    }


    public function actionExit()
    {
        $this->actionLogout();
    }
}